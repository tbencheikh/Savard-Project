name: Deploy Savard Infrastructure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Resource Group exists
        id: check_rg
        run: |
          RG_NAME="savard-rg"
          RG_EXISTS=$(az group exists --name $RG_NAME)
          if [ "$RG_EXISTS" == "true" ]; then
            echo "Resource Group $RG_NAME already exists."
            echo "::set-output name=rg_exists::true"
          else
            echo "Resource Group $RG_NAME does not exist."
            echo "::set-output name=rg_exists::false"
          fi
        shell: bash

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Import existing Resource Group if it exists
        if: steps.check_rg.outputs.rg_exists == 'true'
        run: |
          RG_NAME="savard-rg"
          SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform import azurerm_resource_group.rg /subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Get Public IP
        id: get_ip
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw public_ip | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
          if [[ -z "$PUBLIC_IP" ]]; then
            echo "Error: No valid IP address found in Terraform output."
            exit 1
          fi
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::$PUBLIC_IP"

      - name: Generate Ansible Inventory (YAML format)
        run: |
          cat <<EOF > ansible/inventory.yml
          all:
            hosts:
              savard-server:
                ansible_host: "${{ steps.get_ip.outputs.public_ip }}"
                ansible_user: "adminuser"
                ansible_password: "P@ssw0rd123!"
                ansible_connection: "winrm"
                ansible_winrm_transport: "basic"
                ansible_winrm_scheme: "http"
                ansible_winrm_port: 5985
          EOF
          cat ansible/inventory.yml

      - name: Vérifier le contenu de l'inventaire Ansible
        run: cat ansible/inventory.yml

      - name: Install Ansible and required collections
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade pip
          pip3 install ansible
          pip3 install pywinrm
          ansible-galaxy collection install microsoft.ad --force
          ansible-galaxy collection install community.windows --force
          ansible-galaxy collection install ansible.windows --force
          echo "✅ Collections installées :"
          ansible-galaxy collection list
          echo "✅ Vérification des modules Windows :"
          ansible-doc -l | grep "win_"
          echo "✅ Vérification de l'installation Ansible :"
          ansible --version

      - name: Vérifier si l'inventaire existe
        run: |
          if [ ! -f ansible/inventory.yml ]; then
            echo "❌ ERREUR : Le fichier d'inventaire Ansible n'existe pas !"
            exit 1
          fi

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbook.yml -vvv