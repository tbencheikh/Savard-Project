name: Deploy Savard Infrastructure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Donne les permissions d'exécution au script import_all_resources.sh
        run: chmod +x ./terraform/import_all_resources.sh

      - name: Vérification du mot de passe
        run: |
          if [[ -z "${{ secrets.ADMIN_PASSWORD }}" ]]; then
            echo "❌ ERREUR: ADMIN_PASSWORD est vide !"
            exit 1
          else
            echo "✅ ADMIN_PASSWORD est bien défini."
          fi

      - name: Debug GitHub Secret Injection
        run: |
          echo "TF_VAR_admin_password=${{ secrets.ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "Vérification du secret injecté..."
          echo "TF_VAR_admin_password=$TF_VAR_admin_password"
        

      - name: Debug Terraform Variables
        run: env | grep TF_VAR
      
      
      - name: Run Import Script
        run: |
          export TF_VAR_admin_password="${{ secrets.ADMIN_PASSWORD }}"
          chmod +x import_all_resources.sh
          ./import_all_resources.sh
        working-directory: ./terraform
        env:
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
      
      
      - name: Run Additional Import Script (si nécessaire)
        run: |
          chmod +x import_all_resources.sh  # Permissions d'exécution (si nécessaire)
          ./import_all_resources.sh       # Exécution du script (si nécessaire)
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Afficher les logs Terraform
        if: always()
        run: cat ./terraform/import_log.txt

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan
        working-directory: ./terraform
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
        env:
          TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

      - name: Get Public IP
        id: get_ip
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw public_ip | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
          if [[ -z "$PUBLIC_IP" ]]; then
            echo "⚠️ Avertissement : Aucune adresse IP publique trouvée dans la sortie Terraform."
            echo "::set-output name=public_ip::none"
          else
            echo "Public IP: $PUBLIC_IP"
            echo "::set-output name=public_ip::$PUBLIC_IP"
          fi

      - name: Generate Ansible Inventory (YAML format)
        id: generate_inventory
        run: |
          if [[ "${{ steps.get_ip.outputs.public_ip }}" == "none" ]]; then
            echo "❌ Erreur : Aucune adresse IP publique disponible pour générer l'inventaire Ansible."
            exit 1
          else
            echo "all:" > ansible/inventory.yml
            echo "  hosts:" >> ansible/inventory.yml
            echo "    savard-server:" >> ansible/inventory.yml
            echo "      ansible_host: \"${{ steps.get_ip.outputs.public_ip }}\"" >> ansible/inventory.yml
            echo "      ansible_user: \"adminuser\"" >> ansible/inventory.yml
            echo "      ansible_password: \"${{ secrets.ANSIBLE_PASSWORD }}\"" >> ansible/inventory.yml
            echo "      ansible_connection: \"winrm\"" >> ansible/inventory.yml
            echo "      ansible_winrm_transport: \"basic\"" >> ansible/inventory.yml
            echo "      ansible_winrm_scheme: \"http\"" >> ansible/inventory.yml
            echo "      ansible_winrm_port: 5985" >> ansible/inventory.yml
            cat ansible/inventory.yml  # Optional: Print the inventory for debugging
          fi
  
      - name: Vérifier le contenu de l'inventaire Ansible
        run: cat ansible/inventory.yml

      - name: Vérifier le contenu de l'inventaire Ansible
        run: cat ansible/inventory.yml

      - name: Install Ansible and required collections
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade pip
          pip3 install ansible
          pip3 install pywinrm
          ansible-galaxy collection install microsoft.ad --force
          ansible-galaxy collection install community.windows --force
          ansible-galaxy collection install ansible.windows --force
          echo "✅ Collections installées :"
          ansible-galaxy collection list
          echo "✅ Vérification des modules Windows :"
          ansible-doc -l | grep "win_"
          echo "✅ Vérification de l'installation Ansible :"
          ansible --version

      - name: Vérifier si l'inventaire existe
        run: |
          if [ ! -f ansible/inventory.yml ]; then
            echo "❌ ERREUR : Le fichier d'inventaire Ansible n'existe pas !"
            exit 1
          fi
          
      - name: Test WinRM Connection
        run: |
          export ANSIBLE_PASSWORD="${{ secrets.ANSIBLE_PASSWORD }}"
          echo "Tentative de connexion WinRM à ${{ steps.get_ip.outputs.public_ip }}:5985..."
          python3 scripts/test_winrm.py ${{ steps.get_ip.outputs.public_ip }} adminuser $ANSIBLE_PASSWORD
        

      - name: Run Ansible Playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.yml playbook.yml -vvv

      - name: Cleanup on Failure
        if: failure()
        run: terraform destroy -auto-approve
        working-directory: ./terraform